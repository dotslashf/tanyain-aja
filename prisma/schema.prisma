// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String     @unique
  email         String?    @unique
  password      String?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  emailVerified DateTime?
  questions     Question[]
  answers       Answer[]
  reactions     Reaction[]
  comments      Comment[]
  Account       Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Question {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String     @db.ObjectId
  answers   Answer[]
  comments  Comment[]
  reactions Reaction[]
}

model Answer {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String     @db.ObjectId
  question   Question   @relation(fields: [questionId], references: [id])
  questionId String     @db.ObjectId
  comments   Comment[]
  reactions  Reaction[]
}

model Comment {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String     @db.ObjectId
  question   Question?  @relation(fields: [questionId], references: [id])
  questionId String?    @db.ObjectId
  answer     Answer?    @relation(fields: [answerId], references: [id])
  answerId   String?    @db.ObjectId
  reactions  Reaction[]
}

model Reaction {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  type       String // You can define specific types like 'like', 'dislike', 'love', etc.
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.ObjectId
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?   @db.ObjectId
  answer     Answer?   @relation(fields: [answerId], references: [id])
  answerId   String?   @db.ObjectId
  comment    Comment?  @relation(fields: [commentId], references: [id])
  commentId  String?   @db.ObjectId
}
